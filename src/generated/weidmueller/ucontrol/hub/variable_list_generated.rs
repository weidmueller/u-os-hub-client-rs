// SPDX-FileCopyrightText: 2025 Weidmueller Interface GmbH & Co. KG <oss@weidmueller.com>
//
// SPDX-License-Identifier: MIT

// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum VariableListOffset {}
#[derive(Copy, Clone, PartialEq)]

/// A list of a provider's variables that match the provider's definition.
pub struct VariableList<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for VariableList<'a> {
  type Inner = VariableList<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> VariableList<'a> {
  pub const VT_PROVIDER_DEFINITION_FINGERPRINT: flatbuffers::VOffsetT = 4;
  pub const VT_BASE_TIMESTAMP: flatbuffers::VOffsetT = 6;
  pub const VT_ITEMS: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    VariableList { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args VariableListArgs<'args>
  ) -> flatbuffers::WIPOffset<VariableList<'bldr>> {
    let mut builder = VariableListBuilder::new(_fbb);
    builder.add_provider_definition_fingerprint(args.provider_definition_fingerprint);
    if let Some(x) = args.items { builder.add_items(x); }
    if let Some(x) = args.base_timestamp { builder.add_base_timestamp(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> VariableListT {
    let provider_definition_fingerprint = self.provider_definition_fingerprint();
    let base_timestamp = {
      let x = self.base_timestamp();
      x.unpack()
    };
    let items = self.items().map(|x| {
      x.iter().map(|t| t.unpack()).collect()
    });
    VariableListT {
      provider_definition_fingerprint,
      base_timestamp,
      items,
    }
  }

  /// The fingerprint of the associated provider's definition.
  #[inline]
  pub fn provider_definition_fingerprint(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(VariableList::VT_PROVIDER_DEFINITION_FINGERPRINT, Some(0)).unwrap()}
  }
  /// The timestamp for all changed variables. The base timestamp is the
  /// fallback if no explicit was specified for the variable.
  ///
  /// Only set by the provider!
  /// Consumers can set it to 0s and 0ns. This value is ignored by the 
  /// provider in a write command.
  #[inline]
  pub fn base_timestamp(&self) -> &'a Timestamp {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Timestamp>(VariableList::VT_BASE_TIMESTAMP, None).unwrap()}
  }
  /// The items of the provider's variable list.
  #[inline]
  pub fn items(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Variable<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Variable>>>>(VariableList::VT_ITEMS, None)}
  }
}

impl flatbuffers::Verifiable for VariableList<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("provider_definition_fingerprint", Self::VT_PROVIDER_DEFINITION_FINGERPRINT, false)?
     .visit_field::<Timestamp>("base_timestamp", Self::VT_BASE_TIMESTAMP, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Variable>>>>("items", Self::VT_ITEMS, false)?
     .finish();
    Ok(())
  }
}
pub struct VariableListArgs<'a> {
    pub provider_definition_fingerprint: u64,
    pub base_timestamp: Option<&'a Timestamp>,
    pub items: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Variable<'a>>>>>,
}
impl<'a> Default for VariableListArgs<'a> {
  #[inline]
  fn default() -> Self {
    VariableListArgs {
      provider_definition_fingerprint: 0,
      base_timestamp: None, // required field
      items: None,
    }
  }
}

impl Serialize for VariableList<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("VariableList", 3)?;
      s.serialize_field("provider_definition_fingerprint", &self.provider_definition_fingerprint())?;
      s.serialize_field("base_timestamp", &self.base_timestamp())?;
      if let Some(f) = self.items() {
        s.serialize_field("items", &f)?;
      } else {
        s.skip_field("items")?;
      }
    s.end()
  }
}

pub struct VariableListBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> VariableListBuilder<'a, 'b> {
  #[inline]
  pub fn add_provider_definition_fingerprint(&mut self, provider_definition_fingerprint: u64) {
    self.fbb_.push_slot::<u64>(VariableList::VT_PROVIDER_DEFINITION_FINGERPRINT, provider_definition_fingerprint, 0);
  }
  #[inline]
  pub fn add_base_timestamp(&mut self, base_timestamp: &Timestamp) {
    self.fbb_.push_slot_always::<&Timestamp>(VariableList::VT_BASE_TIMESTAMP, base_timestamp);
  }
  #[inline]
  pub fn add_items(&mut self, items: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Variable<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(VariableList::VT_ITEMS, items);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> VariableListBuilder<'a, 'b> {
    let start = _fbb.start_table();
    VariableListBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<VariableList<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, VariableList::VT_BASE_TIMESTAMP,"base_timestamp");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for VariableList<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("VariableList");
      ds.field("provider_definition_fingerprint", &self.provider_definition_fingerprint());
      ds.field("base_timestamp", &self.base_timestamp());
      ds.field("items", &self.items());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct VariableListT {
  pub provider_definition_fingerprint: u64,
  pub base_timestamp: TimestampT,
  pub items: Option<Vec<VariableT>>,
}
impl Default for VariableListT {
  fn default() -> Self {
    Self {
      provider_definition_fingerprint: 0,
      base_timestamp: Default::default(),
      items: None,
    }
  }
}
impl VariableListT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<VariableList<'b>> {
    let provider_definition_fingerprint = self.provider_definition_fingerprint;
    let base_timestamp_tmp = Some(self.base_timestamp.pack());
    let base_timestamp = base_timestamp_tmp.as_ref();
    let items = self.items.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack(_fbb)).collect();_fbb.create_vector(&w)
    });
    VariableList::create(_fbb, &VariableListArgs{
      provider_definition_fingerprint,
      base_timestamp,
      items,
    })
  }
}
