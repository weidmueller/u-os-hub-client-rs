// SPDX-FileCopyrightText: 2025 Weidmueller Interface GmbH & Co. KG <oss@weidmueller.com>
//
// SPDX-License-Identifier: MIT

// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ProviderDefinitionOffset {}
#[derive(Copy, Clone, PartialEq)]

/// A definition of a provider's provided variables.
///
/// Definition elements have a flat list instead of a hierarchy structure.
/// They support the folder concept as a means of grouping definitions by using
/// a shared key prefix for the grouped definitions.
/// This means that the grouped definitions have keys that begin with a common
/// string.
/// This common string, or shared prefix, is the folder key.
///
/// For security reasons, the provider id must be extracted from the
/// communication channel.
pub struct ProviderDefinition<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ProviderDefinition<'a> {
  type Inner = ProviderDefinition<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ProviderDefinition<'a> {
  pub const VT_FINGERPRINT: flatbuffers::VOffsetT = 4;
  pub const VT_VARIABLE_DEFINITIONS: flatbuffers::VOffsetT = 6;
  pub const VT_STATE: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ProviderDefinition { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ProviderDefinitionArgs<'args>
  ) -> flatbuffers::WIPOffset<ProviderDefinition<'bldr>> {
    let mut builder = ProviderDefinitionBuilder::new(_fbb);
    builder.add_fingerprint(args.fingerprint);
    if let Some(x) = args.variable_definitions { builder.add_variable_definitions(x); }
    builder.add_state(args.state);
    builder.finish()
  }

  pub fn unpack(&self) -> ProviderDefinitionT {
    let fingerprint = self.fingerprint();
    let variable_definitions = self.variable_definitions().map(|x| {
      x.iter().map(|t| t.unpack()).collect()
    });
    let state = self.state();
    ProviderDefinitionT {
      fingerprint,
      variable_definitions,
      state,
    }
  }

  /// The fingerprint is a version identification of the provider definition.
  ///
  /// Therefore, the fingerprint can be used by a consumer to check whether
  /// the provider's definition matches the values received.
  /// Whenever a provider definition changed, the provider must change the
  /// fingerprint.
  #[inline]
  pub fn fingerprint(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(ProviderDefinition::VT_FINGERPRINT, Some(0)).unwrap()}
  }
  /// The list of variable definitions.
  #[inline]
  pub fn variable_definitions(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<VariableDefinition<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<VariableDefinition>>>>(ProviderDefinition::VT_VARIABLE_DEFINITIONS, None)}
  }
  /// The current state of the provider definition. The state will be set by the registry.
  #[inline]
  pub fn state(&self) -> ProviderDefinitionState {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ProviderDefinitionState>(ProviderDefinition::VT_STATE, Some(ProviderDefinitionState::UNSPECIFIED)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ProviderDefinition<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("fingerprint", Self::VT_FINGERPRINT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<VariableDefinition>>>>("variable_definitions", Self::VT_VARIABLE_DEFINITIONS, false)?
     .visit_field::<ProviderDefinitionState>("state", Self::VT_STATE, false)?
     .finish();
    Ok(())
  }
}
pub struct ProviderDefinitionArgs<'a> {
    pub fingerprint: u64,
    pub variable_definitions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<VariableDefinition<'a>>>>>,
    pub state: ProviderDefinitionState,
}
impl<'a> Default for ProviderDefinitionArgs<'a> {
  #[inline]
  fn default() -> Self {
    ProviderDefinitionArgs {
      fingerprint: 0,
      variable_definitions: None,
      state: ProviderDefinitionState::UNSPECIFIED,
    }
  }
}

impl Serialize for ProviderDefinition<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ProviderDefinition", 3)?;
      s.serialize_field("fingerprint", &self.fingerprint())?;
      if let Some(f) = self.variable_definitions() {
        s.serialize_field("variable_definitions", &f)?;
      } else {
        s.skip_field("variable_definitions")?;
      }
      s.serialize_field("state", &self.state())?;
    s.end()
  }
}

pub struct ProviderDefinitionBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ProviderDefinitionBuilder<'a, 'b> {
  #[inline]
  pub fn add_fingerprint(&mut self, fingerprint: u64) {
    self.fbb_.push_slot::<u64>(ProviderDefinition::VT_FINGERPRINT, fingerprint, 0);
  }
  #[inline]
  pub fn add_variable_definitions(&mut self, variable_definitions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<VariableDefinition<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ProviderDefinition::VT_VARIABLE_DEFINITIONS, variable_definitions);
  }
  #[inline]
  pub fn add_state(&mut self, state: ProviderDefinitionState) {
    self.fbb_.push_slot::<ProviderDefinitionState>(ProviderDefinition::VT_STATE, state, ProviderDefinitionState::UNSPECIFIED);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ProviderDefinitionBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ProviderDefinitionBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ProviderDefinition<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ProviderDefinition<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ProviderDefinition");
      ds.field("fingerprint", &self.fingerprint());
      ds.field("variable_definitions", &self.variable_definitions());
      ds.field("state", &self.state());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ProviderDefinitionT {
  pub fingerprint: u64,
  pub variable_definitions: Option<Vec<VariableDefinitionT>>,
  pub state: ProviderDefinitionState,
}
impl Default for ProviderDefinitionT {
  fn default() -> Self {
    Self {
      fingerprint: 0,
      variable_definitions: None,
      state: ProviderDefinitionState::UNSPECIFIED,
    }
  }
}
impl ProviderDefinitionT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<ProviderDefinition<'b>> {
    let fingerprint = self.fingerprint;
    let variable_definitions = self.variable_definitions.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack(_fbb)).collect();_fbb.create_vector(&w)
    });
    let state = self.state;
    ProviderDefinition::create(_fbb, &ProviderDefinitionArgs{
      fingerprint,
      variable_definitions,
      state,
    })
  }
}
