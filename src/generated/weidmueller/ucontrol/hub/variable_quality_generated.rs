// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_VARIABLE_QUALITY: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_VARIABLE_QUALITY: u8 = 192;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_VARIABLE_QUALITY: [VariableQuality; 5] = [
  VariableQuality::BAD,
  VariableQuality::UNCERTAIN,
  VariableQuality::UNCERTAIN_LAST_USABLE_VALUE,
  VariableQuality::UNCERTAIN_INITIAL_VALUE,
  VariableQuality::GOOD,
];

/// The quality of a variable
///
/// This is set by the provider and indicates the quality of a variable value.
/// The `Uncertain` states are modelled after the OPC UA specification.  
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct VariableQuality(pub u8);
#[allow(non_upper_case_globals)]
impl VariableQuality {
  /// Indicates that the value is not usable
  pub const BAD: Self = Self(0);
  /// Variable quality is uncertain without any specific reason, but may still be usable e.g. for display or other non critical purposes
  pub const UNCERTAIN: Self = Self(64);
  /// The variable has stopped updating and contains its last usable value
  pub const UNCERTAIN_LAST_USABLE_VALUE: Self = Self(67);
  /// Variable has not been written yet and still contains a default initial value
  pub const UNCERTAIN_INITIAL_VALUE: Self = Self(68);
  /// Indicates that the value is good and can be used without restrictions
  pub const GOOD: Self = Self(192);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 192;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::BAD,
    Self::UNCERTAIN,
    Self::UNCERTAIN_LAST_USABLE_VALUE,
    Self::UNCERTAIN_INITIAL_VALUE,
    Self::GOOD,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::BAD => Some("BAD"),
      Self::UNCERTAIN => Some("UNCERTAIN"),
      Self::UNCERTAIN_LAST_USABLE_VALUE => Some("UNCERTAIN_LAST_USABLE_VALUE"),
      Self::UNCERTAIN_INITIAL_VALUE => Some("UNCERTAIN_INITIAL_VALUE"),
      Self::GOOD => Some("GOOD"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for VariableQuality {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl Serialize for VariableQuality {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    serializer.serialize_unit_variant("VariableQuality", self.0 as u32, self.variant_name().unwrap())
  }
}

impl<'a> flatbuffers::Follow<'a> for VariableQuality {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for VariableQuality {
    type Output = VariableQuality;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for VariableQuality {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for VariableQuality {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for VariableQuality {}
