// SPDX-FileCopyrightText: 2025 Weidmueller Interface GmbH & Co. KG <oss@weidmueller.com>
//
// SPDX-License-Identifier: MIT

// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ReadProviderDefinitionQueryRequestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// A query request that requests a provider's definition.
pub struct ReadProviderDefinitionQueryRequest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ReadProviderDefinitionQueryRequest<'a> {
  type Inner = ReadProviderDefinitionQueryRequest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ReadProviderDefinitionQueryRequest<'a> {

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ReadProviderDefinitionQueryRequest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    _args: &'args ReadProviderDefinitionQueryRequestArgs
  ) -> flatbuffers::WIPOffset<ReadProviderDefinitionQueryRequest<'bldr>> {
    let mut builder = ReadProviderDefinitionQueryRequestBuilder::new(_fbb);
    builder.finish()
  }

  pub fn unpack(&self) -> ReadProviderDefinitionQueryRequestT {
    ReadProviderDefinitionQueryRequestT {
    }
  }
}

impl flatbuffers::Verifiable for ReadProviderDefinitionQueryRequest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .finish();
    Ok(())
  }
}
pub struct ReadProviderDefinitionQueryRequestArgs {
}
impl<'a> Default for ReadProviderDefinitionQueryRequestArgs {
  #[inline]
  fn default() -> Self {
    ReadProviderDefinitionQueryRequestArgs {
    }
  }
}

impl Serialize for ReadProviderDefinitionQueryRequest<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let s = serializer.serialize_struct("ReadProviderDefinitionQueryRequest", 0)?;
    s.end()
  }
}

pub struct ReadProviderDefinitionQueryRequestBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ReadProviderDefinitionQueryRequestBuilder<'a, 'b> {
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ReadProviderDefinitionQueryRequestBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ReadProviderDefinitionQueryRequestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ReadProviderDefinitionQueryRequest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ReadProviderDefinitionQueryRequest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ReadProviderDefinitionQueryRequest");
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ReadProviderDefinitionQueryRequestT {
}
impl Default for ReadProviderDefinitionQueryRequestT {
  fn default() -> Self {
    Self {
    }
  }
}
impl ReadProviderDefinitionQueryRequestT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<ReadProviderDefinitionQueryRequest<'b>> {
    ReadProviderDefinitionQueryRequest::create(_fbb, &ReadProviderDefinitionQueryRequestArgs{
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `ReadProviderDefinitionQueryRequest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_read_provider_definition_query_request_unchecked`.
pub fn root_as_read_provider_definition_query_request(buf: &[u8]) -> Result<ReadProviderDefinitionQueryRequest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<ReadProviderDefinitionQueryRequest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ReadProviderDefinitionQueryRequest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_read_provider_definition_query_request_unchecked`.
pub fn size_prefixed_root_as_read_provider_definition_query_request(buf: &[u8]) -> Result<ReadProviderDefinitionQueryRequest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<ReadProviderDefinitionQueryRequest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ReadProviderDefinitionQueryRequest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_read_provider_definition_query_request_unchecked`.
pub fn root_as_read_provider_definition_query_request_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ReadProviderDefinitionQueryRequest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<ReadProviderDefinitionQueryRequest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ReadProviderDefinitionQueryRequest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_read_provider_definition_query_request_unchecked`.
pub fn size_prefixed_root_as_read_provider_definition_query_request_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ReadProviderDefinitionQueryRequest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<ReadProviderDefinitionQueryRequest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ReadProviderDefinitionQueryRequest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ReadProviderDefinitionQueryRequest`.
pub unsafe fn root_as_read_provider_definition_query_request_unchecked(buf: &[u8]) -> ReadProviderDefinitionQueryRequest {
  flatbuffers::root_unchecked::<ReadProviderDefinitionQueryRequest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ReadProviderDefinitionQueryRequest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ReadProviderDefinitionQueryRequest`.
pub unsafe fn size_prefixed_root_as_read_provider_definition_query_request_unchecked(buf: &[u8]) -> ReadProviderDefinitionQueryRequest {
  flatbuffers::size_prefixed_root_unchecked::<ReadProviderDefinitionQueryRequest>(buf)
}
#[inline]
pub fn finish_read_provider_definition_query_request_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<ReadProviderDefinitionQueryRequest<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_read_provider_definition_query_request_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<ReadProviderDefinitionQueryRequest<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
