// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ProviderDefinitionChangedEventOffset {}
#[derive(Copy, Clone, PartialEq)]

/// An event that describes a provider's definition that has just changed.
pub struct ProviderDefinitionChangedEvent<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ProviderDefinitionChangedEvent<'a> {
  type Inner = ProviderDefinitionChangedEvent<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ProviderDefinitionChangedEvent<'a> {
  pub const VT_PROVIDER_DEFINITION: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ProviderDefinitionChangedEvent { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ProviderDefinitionChangedEventArgs<'args>
  ) -> flatbuffers::WIPOffset<ProviderDefinitionChangedEvent<'bldr>> {
    let mut builder = ProviderDefinitionChangedEventBuilder::new(_fbb);
    if let Some(x) = args.provider_definition { builder.add_provider_definition(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> ProviderDefinitionChangedEventT {
    let provider_definition = self.provider_definition().map(|x| {
      Box::new(x.unpack())
    });
    ProviderDefinitionChangedEventT {
      provider_definition,
    }
  }

  /// A definition that has just been changed.
  /// If the provider_definition is null, the provider is removed.
  #[inline]
  pub fn provider_definition(&self) -> Option<ProviderDefinition<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ProviderDefinition>>(ProviderDefinitionChangedEvent::VT_PROVIDER_DEFINITION, None)}
  }
}

impl flatbuffers::Verifiable for ProviderDefinitionChangedEvent<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<ProviderDefinition>>("provider_definition", Self::VT_PROVIDER_DEFINITION, false)?
     .finish();
    Ok(())
  }
}
pub struct ProviderDefinitionChangedEventArgs<'a> {
    pub provider_definition: Option<flatbuffers::WIPOffset<ProviderDefinition<'a>>>,
}
impl<'a> Default for ProviderDefinitionChangedEventArgs<'a> {
  #[inline]
  fn default() -> Self {
    ProviderDefinitionChangedEventArgs {
      provider_definition: None,
    }
  }
}

impl Serialize for ProviderDefinitionChangedEvent<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ProviderDefinitionChangedEvent", 1)?;
      if let Some(f) = self.provider_definition() {
        s.serialize_field("provider_definition", &f)?;
      } else {
        s.skip_field("provider_definition")?;
      }
    s.end()
  }
}

pub struct ProviderDefinitionChangedEventBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ProviderDefinitionChangedEventBuilder<'a, 'b> {
  #[inline]
  pub fn add_provider_definition(&mut self, provider_definition: flatbuffers::WIPOffset<ProviderDefinition<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ProviderDefinition>>(ProviderDefinitionChangedEvent::VT_PROVIDER_DEFINITION, provider_definition);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ProviderDefinitionChangedEventBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ProviderDefinitionChangedEventBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ProviderDefinitionChangedEvent<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ProviderDefinitionChangedEvent<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ProviderDefinitionChangedEvent");
      ds.field("provider_definition", &self.provider_definition());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ProviderDefinitionChangedEventT {
  pub provider_definition: Option<Box<ProviderDefinitionT>>,
}
impl Default for ProviderDefinitionChangedEventT {
  fn default() -> Self {
    Self {
      provider_definition: None,
    }
  }
}
impl ProviderDefinitionChangedEventT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<ProviderDefinitionChangedEvent<'b>> {
    let provider_definition = self.provider_definition.as_ref().map(|x|{
      x.pack(_fbb)
    });
    ProviderDefinitionChangedEvent::create(_fbb, &ProviderDefinitionChangedEventArgs{
      provider_definition,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `ProviderDefinitionChangedEvent`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_provider_definition_changed_event_unchecked`.
pub fn root_as_provider_definition_changed_event(buf: &[u8]) -> Result<ProviderDefinitionChangedEvent, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<ProviderDefinitionChangedEvent>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ProviderDefinitionChangedEvent` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_provider_definition_changed_event_unchecked`.
pub fn size_prefixed_root_as_provider_definition_changed_event(buf: &[u8]) -> Result<ProviderDefinitionChangedEvent, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<ProviderDefinitionChangedEvent>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ProviderDefinitionChangedEvent` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_provider_definition_changed_event_unchecked`.
pub fn root_as_provider_definition_changed_event_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ProviderDefinitionChangedEvent<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<ProviderDefinitionChangedEvent<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ProviderDefinitionChangedEvent` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_provider_definition_changed_event_unchecked`.
pub fn size_prefixed_root_as_provider_definition_changed_event_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ProviderDefinitionChangedEvent<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<ProviderDefinitionChangedEvent<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ProviderDefinitionChangedEvent and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ProviderDefinitionChangedEvent`.
pub unsafe fn root_as_provider_definition_changed_event_unchecked(buf: &[u8]) -> ProviderDefinitionChangedEvent {
  flatbuffers::root_unchecked::<ProviderDefinitionChangedEvent>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ProviderDefinitionChangedEvent and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ProviderDefinitionChangedEvent`.
pub unsafe fn size_prefixed_root_as_provider_definition_changed_event_unchecked(buf: &[u8]) -> ProviderDefinitionChangedEvent {
  flatbuffers::size_prefixed_root_unchecked::<ProviderDefinitionChangedEvent>(buf)
}
#[inline]
pub fn finish_provider_definition_changed_event_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<ProviderDefinitionChangedEvent<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_provider_definition_changed_event_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<ProviderDefinitionChangedEvent<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
