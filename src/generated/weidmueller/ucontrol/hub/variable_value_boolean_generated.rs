// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum VariableValueBooleanOffset {}
#[derive(Copy, Clone, PartialEq)]

/// A boolean value of a variable.
pub struct VariableValueBoolean<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for VariableValueBoolean<'a> {
  type Inner = VariableValueBoolean<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> VariableValueBoolean<'a> {
  pub const VT_VALUE: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    VariableValueBoolean { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args VariableValueBooleanArgs
  ) -> flatbuffers::WIPOffset<VariableValueBoolean<'bldr>> {
    let mut builder = VariableValueBooleanBuilder::new(_fbb);
    builder.add_value(args.value);
    builder.finish()
  }

  pub fn unpack(&self) -> VariableValueBooleanT {
    let value = self.value();
    VariableValueBooleanT {
      value,
    }
  }

  #[inline]
  pub fn value(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(VariableValueBoolean::VT_VALUE, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for VariableValueBoolean<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("value", Self::VT_VALUE, false)?
     .finish();
    Ok(())
  }
}
pub struct VariableValueBooleanArgs {
    pub value: bool,
}
impl<'a> Default for VariableValueBooleanArgs {
  #[inline]
  fn default() -> Self {
    VariableValueBooleanArgs {
      value: false,
    }
  }
}

impl Serialize for VariableValueBoolean<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("VariableValueBoolean", 1)?;
      s.serialize_field("value", &self.value())?;
    s.end()
  }
}

pub struct VariableValueBooleanBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> VariableValueBooleanBuilder<'a, 'b> {
  #[inline]
  pub fn add_value(&mut self, value: bool) {
    self.fbb_.push_slot::<bool>(VariableValueBoolean::VT_VALUE, value, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> VariableValueBooleanBuilder<'a, 'b> {
    let start = _fbb.start_table();
    VariableValueBooleanBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<VariableValueBoolean<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for VariableValueBoolean<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("VariableValueBoolean");
      ds.field("value", &self.value());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct VariableValueBooleanT {
  pub value: bool,
}
impl Default for VariableValueBooleanT {
  fn default() -> Self {
    Self {
      value: false,
    }
  }
}
impl VariableValueBooleanT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<VariableValueBoolean<'b>> {
    let value = self.value;
    VariableValueBoolean::create(_fbb, &VariableValueBooleanArgs{
      value,
    })
  }
}
