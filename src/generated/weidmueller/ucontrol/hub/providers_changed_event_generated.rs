// SPDX-FileCopyrightText: 2025 Weidmueller Interface GmbH & Co. KG <oss@weidmueller.com>
//
// SPDX-License-Identifier: MIT

// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ProvidersChangedEventOffset {}
#[derive(Copy, Clone, PartialEq)]

/// An event that describes a list of providers that have just changed.
pub struct ProvidersChangedEvent<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ProvidersChangedEvent<'a> {
  type Inner = ProvidersChangedEvent<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ProvidersChangedEvent<'a> {
  pub const VT_PROVIDERS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ProvidersChangedEvent { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ProvidersChangedEventArgs<'args>
  ) -> flatbuffers::WIPOffset<ProvidersChangedEvent<'bldr>> {
    let mut builder = ProvidersChangedEventBuilder::new(_fbb);
    if let Some(x) = args.providers { builder.add_providers(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> ProvidersChangedEventT {
    let providers = {
      let x = self.providers();
      Box::new(x.unpack())
    };
    ProvidersChangedEventT {
      providers,
    }
  }

  /// A list of providers that have just been changed.
  #[inline]
  pub fn providers(&self) -> ProviderList<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ProviderList>>(ProvidersChangedEvent::VT_PROVIDERS, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for ProvidersChangedEvent<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<ProviderList>>("providers", Self::VT_PROVIDERS, true)?
     .finish();
    Ok(())
  }
}
pub struct ProvidersChangedEventArgs<'a> {
    pub providers: Option<flatbuffers::WIPOffset<ProviderList<'a>>>,
}
impl<'a> Default for ProvidersChangedEventArgs<'a> {
  #[inline]
  fn default() -> Self {
    ProvidersChangedEventArgs {
      providers: None, // required field
    }
  }
}

impl Serialize for ProvidersChangedEvent<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ProvidersChangedEvent", 1)?;
      s.serialize_field("providers", &self.providers())?;
    s.end()
  }
}

pub struct ProvidersChangedEventBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ProvidersChangedEventBuilder<'a, 'b> {
  #[inline]
  pub fn add_providers(&mut self, providers: flatbuffers::WIPOffset<ProviderList<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ProviderList>>(ProvidersChangedEvent::VT_PROVIDERS, providers);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ProvidersChangedEventBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ProvidersChangedEventBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ProvidersChangedEvent<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, ProvidersChangedEvent::VT_PROVIDERS,"providers");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ProvidersChangedEvent<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ProvidersChangedEvent");
      ds.field("providers", &self.providers());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ProvidersChangedEventT {
  pub providers: Box<ProviderListT>,
}
impl Default for ProvidersChangedEventT {
  fn default() -> Self {
    Self {
      providers: Default::default(),
    }
  }
}
impl ProvidersChangedEventT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<ProvidersChangedEvent<'b>> {
    let providers = Some({
      let x = &self.providers;
      x.pack(_fbb)
    });
    ProvidersChangedEvent::create(_fbb, &ProvidersChangedEventArgs{
      providers,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `ProvidersChangedEvent`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_providers_changed_event_unchecked`.
pub fn root_as_providers_changed_event(buf: &[u8]) -> Result<ProvidersChangedEvent, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<ProvidersChangedEvent>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ProvidersChangedEvent` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_providers_changed_event_unchecked`.
pub fn size_prefixed_root_as_providers_changed_event(buf: &[u8]) -> Result<ProvidersChangedEvent, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<ProvidersChangedEvent>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ProvidersChangedEvent` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_providers_changed_event_unchecked`.
pub fn root_as_providers_changed_event_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ProvidersChangedEvent<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<ProvidersChangedEvent<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ProvidersChangedEvent` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_providers_changed_event_unchecked`.
pub fn size_prefixed_root_as_providers_changed_event_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ProvidersChangedEvent<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<ProvidersChangedEvent<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ProvidersChangedEvent and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ProvidersChangedEvent`.
pub unsafe fn root_as_providers_changed_event_unchecked(buf: &[u8]) -> ProvidersChangedEvent {
  flatbuffers::root_unchecked::<ProvidersChangedEvent>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ProvidersChangedEvent and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ProvidersChangedEvent`.
pub unsafe fn size_prefixed_root_as_providers_changed_event_unchecked(buf: &[u8]) -> ProvidersChangedEvent {
  flatbuffers::size_prefixed_root_unchecked::<ProvidersChangedEvent>(buf)
}
#[inline]
pub fn finish_providers_changed_event_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<ProvidersChangedEvent<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_providers_changed_event_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<ProvidersChangedEvent<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
