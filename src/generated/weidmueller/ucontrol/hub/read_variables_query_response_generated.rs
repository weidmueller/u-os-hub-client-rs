// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ReadVariablesQueryResponseOffset {}
#[derive(Copy, Clone, PartialEq)]

/// A query response that responds to a requested list of provider variables.
pub struct ReadVariablesQueryResponse<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ReadVariablesQueryResponse<'a> {
  type Inner = ReadVariablesQueryResponse<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ReadVariablesQueryResponse<'a> {
  pub const VT_VARIABLES: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ReadVariablesQueryResponse { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ReadVariablesQueryResponseArgs<'args>
  ) -> flatbuffers::WIPOffset<ReadVariablesQueryResponse<'bldr>> {
    let mut builder = ReadVariablesQueryResponseBuilder::new(_fbb);
    if let Some(x) = args.variables { builder.add_variables(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> ReadVariablesQueryResponseT {
    let variables = {
      let x = self.variables();
      Box::new(x.unpack())
    };
    ReadVariablesQueryResponseT {
      variables,
    }
  }

  /// A list of variables that have been requested.
  #[inline]
  pub fn variables(&self) -> VariableList<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<VariableList>>(ReadVariablesQueryResponse::VT_VARIABLES, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for ReadVariablesQueryResponse<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<VariableList>>("variables", Self::VT_VARIABLES, true)?
     .finish();
    Ok(())
  }
}
pub struct ReadVariablesQueryResponseArgs<'a> {
    pub variables: Option<flatbuffers::WIPOffset<VariableList<'a>>>,
}
impl<'a> Default for ReadVariablesQueryResponseArgs<'a> {
  #[inline]
  fn default() -> Self {
    ReadVariablesQueryResponseArgs {
      variables: None, // required field
    }
  }
}

impl Serialize for ReadVariablesQueryResponse<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ReadVariablesQueryResponse", 1)?;
      s.serialize_field("variables", &self.variables())?;
    s.end()
  }
}

pub struct ReadVariablesQueryResponseBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ReadVariablesQueryResponseBuilder<'a, 'b> {
  #[inline]
  pub fn add_variables(&mut self, variables: flatbuffers::WIPOffset<VariableList<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<VariableList>>(ReadVariablesQueryResponse::VT_VARIABLES, variables);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ReadVariablesQueryResponseBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ReadVariablesQueryResponseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ReadVariablesQueryResponse<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, ReadVariablesQueryResponse::VT_VARIABLES,"variables");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ReadVariablesQueryResponse<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ReadVariablesQueryResponse");
      ds.field("variables", &self.variables());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ReadVariablesQueryResponseT {
  pub variables: Box<VariableListT>,
}
impl Default for ReadVariablesQueryResponseT {
  fn default() -> Self {
    Self {
      variables: Default::default(),
    }
  }
}
impl ReadVariablesQueryResponseT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<ReadVariablesQueryResponse<'b>> {
    let variables = Some({
      let x = &self.variables;
      x.pack(_fbb)
    });
    ReadVariablesQueryResponse::create(_fbb, &ReadVariablesQueryResponseArgs{
      variables,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `ReadVariablesQueryResponse`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_read_variables_query_response_unchecked`.
pub fn root_as_read_variables_query_response(buf: &[u8]) -> Result<ReadVariablesQueryResponse, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<ReadVariablesQueryResponse>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ReadVariablesQueryResponse` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_read_variables_query_response_unchecked`.
pub fn size_prefixed_root_as_read_variables_query_response(buf: &[u8]) -> Result<ReadVariablesQueryResponse, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<ReadVariablesQueryResponse>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ReadVariablesQueryResponse` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_read_variables_query_response_unchecked`.
pub fn root_as_read_variables_query_response_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ReadVariablesQueryResponse<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<ReadVariablesQueryResponse<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ReadVariablesQueryResponse` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_read_variables_query_response_unchecked`.
pub fn size_prefixed_root_as_read_variables_query_response_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ReadVariablesQueryResponse<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<ReadVariablesQueryResponse<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ReadVariablesQueryResponse and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ReadVariablesQueryResponse`.
pub unsafe fn root_as_read_variables_query_response_unchecked(buf: &[u8]) -> ReadVariablesQueryResponse {
  flatbuffers::root_unchecked::<ReadVariablesQueryResponse>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ReadVariablesQueryResponse and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ReadVariablesQueryResponse`.
pub unsafe fn size_prefixed_root_as_read_variables_query_response_unchecked(buf: &[u8]) -> ReadVariablesQueryResponse {
  flatbuffers::size_prefixed_root_unchecked::<ReadVariablesQueryResponse>(buf)
}
#[inline]
pub fn finish_read_variables_query_response_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<ReadVariablesQueryResponse<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_read_variables_query_response_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<ReadVariablesQueryResponse<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
