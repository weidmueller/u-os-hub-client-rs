// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_VARIABLE_VALUE: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_VARIABLE_VALUE: u8 = 6;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_VARIABLE_VALUE: [VariableValue; 7] = [
  VariableValue::NONE,
  VariableValue::Boolean,
  VariableValue::Duration,
  VariableValue::Float64,
  VariableValue::Int64,
  VariableValue::String,
  VariableValue::Timestamp,
];

/// A value of a variable.
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct VariableValue(pub u8);
#[allow(non_upper_case_globals)]
impl VariableValue {
  pub const NONE: Self = Self(0);
  pub const Boolean: Self = Self(1);
  pub const Duration: Self = Self(2);
  pub const Float64: Self = Self(3);
  pub const Int64: Self = Self(4);
  pub const String: Self = Self(5);
  pub const Timestamp: Self = Self(6);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 6;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NONE,
    Self::Boolean,
    Self::Duration,
    Self::Float64,
    Self::Int64,
    Self::String,
    Self::Timestamp,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NONE => Some("NONE"),
      Self::Boolean => Some("Boolean"),
      Self::Duration => Some("Duration"),
      Self::Float64 => Some("Float64"),
      Self::Int64 => Some("Int64"),
      Self::String => Some("String"),
      Self::Timestamp => Some("Timestamp"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for VariableValue {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl Serialize for VariableValue {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    serializer.serialize_unit_variant("VariableValue", self.0 as u32, self.variant_name().unwrap())
  }
}

impl<'a> flatbuffers::Follow<'a> for VariableValue {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for VariableValue {
    type Output = VariableValue;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for VariableValue {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for VariableValue {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for VariableValue {}
pub struct VariableValueUnionTableOffset {}

#[allow(clippy::upper_case_acronyms)]
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub enum VariableValueT {
  NONE,
  Boolean(Box<VariableValueBooleanT>),
  Duration(Box<VariableValueDurationT>),
  Float64(Box<VariableValueFloat64T>),
  Int64(Box<VariableValueInt64T>),
  String(Box<VariableValueStringT>),
  Timestamp(Box<VariableValueTimestampT>),
}
impl Default for VariableValueT {
  fn default() -> Self {
    Self::NONE
  }
}
impl VariableValueT {
  pub fn variable_value_type(&self) -> VariableValue {
    match self {
      Self::NONE => VariableValue::NONE,
      Self::Boolean(_) => VariableValue::Boolean,
      Self::Duration(_) => VariableValue::Duration,
      Self::Float64(_) => VariableValue::Float64,
      Self::Int64(_) => VariableValue::Int64,
      Self::String(_) => VariableValue::String,
      Self::Timestamp(_) => VariableValue::Timestamp,
    }
  }
  pub fn pack(&self, fbb: &mut flatbuffers::FlatBufferBuilder) -> Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>> {
    match self {
      Self::NONE => None,
      Self::Boolean(v) => Some(v.pack(fbb).as_union_value()),
      Self::Duration(v) => Some(v.pack(fbb).as_union_value()),
      Self::Float64(v) => Some(v.pack(fbb).as_union_value()),
      Self::Int64(v) => Some(v.pack(fbb).as_union_value()),
      Self::String(v) => Some(v.pack(fbb).as_union_value()),
      Self::Timestamp(v) => Some(v.pack(fbb).as_union_value()),
    }
  }
  /// If the union variant matches, return the owned VariableValueBooleanT, setting the union to NONE.
  pub fn take_boolean(&mut self) -> Option<Box<VariableValueBooleanT>> {
    if let Self::Boolean(_) = self {
      let v = core::mem::replace(self, Self::NONE);
      if let Self::Boolean(w) = v {
        Some(w)
      } else {
        unreachable!()
      }
    } else {
      None
    }
  }
  /// If the union variant matches, return a reference to the VariableValueBooleanT.
  pub fn as_boolean(&self) -> Option<&VariableValueBooleanT> {
    if let Self::Boolean(v) = self { Some(v.as_ref()) } else { None }
  }
  /// If the union variant matches, return a mutable reference to the VariableValueBooleanT.
  pub fn as_boolean_mut(&mut self) -> Option<&mut VariableValueBooleanT> {
    if let Self::Boolean(v) = self { Some(v.as_mut()) } else { None }
  }
  /// If the union variant matches, return the owned VariableValueDurationT, setting the union to NONE.
  pub fn take_duration(&mut self) -> Option<Box<VariableValueDurationT>> {
    if let Self::Duration(_) = self {
      let v = core::mem::replace(self, Self::NONE);
      if let Self::Duration(w) = v {
        Some(w)
      } else {
        unreachable!()
      }
    } else {
      None
    }
  }
  /// If the union variant matches, return a reference to the VariableValueDurationT.
  pub fn as_duration(&self) -> Option<&VariableValueDurationT> {
    if let Self::Duration(v) = self { Some(v.as_ref()) } else { None }
  }
  /// If the union variant matches, return a mutable reference to the VariableValueDurationT.
  pub fn as_duration_mut(&mut self) -> Option<&mut VariableValueDurationT> {
    if let Self::Duration(v) = self { Some(v.as_mut()) } else { None }
  }
  /// If the union variant matches, return the owned VariableValueFloat64T, setting the union to NONE.
  pub fn take_float_64(&mut self) -> Option<Box<VariableValueFloat64T>> {
    if let Self::Float64(_) = self {
      let v = core::mem::replace(self, Self::NONE);
      if let Self::Float64(w) = v {
        Some(w)
      } else {
        unreachable!()
      }
    } else {
      None
    }
  }
  /// If the union variant matches, return a reference to the VariableValueFloat64T.
  pub fn as_float_64(&self) -> Option<&VariableValueFloat64T> {
    if let Self::Float64(v) = self { Some(v.as_ref()) } else { None }
  }
  /// If the union variant matches, return a mutable reference to the VariableValueFloat64T.
  pub fn as_float_64_mut(&mut self) -> Option<&mut VariableValueFloat64T> {
    if let Self::Float64(v) = self { Some(v.as_mut()) } else { None }
  }
  /// If the union variant matches, return the owned VariableValueInt64T, setting the union to NONE.
  pub fn take_int_64(&mut self) -> Option<Box<VariableValueInt64T>> {
    if let Self::Int64(_) = self {
      let v = core::mem::replace(self, Self::NONE);
      if let Self::Int64(w) = v {
        Some(w)
      } else {
        unreachable!()
      }
    } else {
      None
    }
  }
  /// If the union variant matches, return a reference to the VariableValueInt64T.
  pub fn as_int_64(&self) -> Option<&VariableValueInt64T> {
    if let Self::Int64(v) = self { Some(v.as_ref()) } else { None }
  }
  /// If the union variant matches, return a mutable reference to the VariableValueInt64T.
  pub fn as_int_64_mut(&mut self) -> Option<&mut VariableValueInt64T> {
    if let Self::Int64(v) = self { Some(v.as_mut()) } else { None }
  }
  /// If the union variant matches, return the owned VariableValueStringT, setting the union to NONE.
  pub fn take_string(&mut self) -> Option<Box<VariableValueStringT>> {
    if let Self::String(_) = self {
      let v = core::mem::replace(self, Self::NONE);
      if let Self::String(w) = v {
        Some(w)
      } else {
        unreachable!()
      }
    } else {
      None
    }
  }
  /// If the union variant matches, return a reference to the VariableValueStringT.
  pub fn as_string(&self) -> Option<&VariableValueStringT> {
    if let Self::String(v) = self { Some(v.as_ref()) } else { None }
  }
  /// If the union variant matches, return a mutable reference to the VariableValueStringT.
  pub fn as_string_mut(&mut self) -> Option<&mut VariableValueStringT> {
    if let Self::String(v) = self { Some(v.as_mut()) } else { None }
  }
  /// If the union variant matches, return the owned VariableValueTimestampT, setting the union to NONE.
  pub fn take_timestamp(&mut self) -> Option<Box<VariableValueTimestampT>> {
    if let Self::Timestamp(_) = self {
      let v = core::mem::replace(self, Self::NONE);
      if let Self::Timestamp(w) = v {
        Some(w)
      } else {
        unreachable!()
      }
    } else {
      None
    }
  }
  /// If the union variant matches, return a reference to the VariableValueTimestampT.
  pub fn as_timestamp(&self) -> Option<&VariableValueTimestampT> {
    if let Self::Timestamp(v) = self { Some(v.as_ref()) } else { None }
  }
  /// If the union variant matches, return a mutable reference to the VariableValueTimestampT.
  pub fn as_timestamp_mut(&mut self) -> Option<&mut VariableValueTimestampT> {
    if let Self::Timestamp(v) = self { Some(v.as_mut()) } else { None }
  }
}
