// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum VariableDefinitionOffset {}
#[derive(Copy, Clone, PartialEq)]

/// The definition of a variable.
pub struct VariableDefinition<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for VariableDefinition<'a> {
  type Inner = VariableDefinition<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> VariableDefinition<'a> {
  pub const VT_KEY: flatbuffers::VOffsetT = 4;
  pub const VT_ID: flatbuffers::VOffsetT = 6;
  pub const VT_DATA_TYPE: flatbuffers::VOffsetT = 8;
  pub const VT_ACCESS_TYPE: flatbuffers::VOffsetT = 10;
  pub const VT_EXPERIMENTAL: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    VariableDefinition { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args VariableDefinitionArgs<'args>
  ) -> flatbuffers::WIPOffset<VariableDefinition<'bldr>> {
    let mut builder = VariableDefinitionBuilder::new(_fbb);
    builder.add_id(args.id);
    if let Some(x) = args.key { builder.add_key(x); }
    builder.add_experimental(args.experimental);
    builder.add_access_type(args.access_type);
    builder.add_data_type(args.data_type);
    builder.finish()
  }

  pub fn unpack(&self) -> VariableDefinitionT {
    let key = {
      let x = self.key();
      x.to_string()
    };
    let id = self.id();
    let data_type = self.data_type();
    let access_type = self.access_type();
    let experimental = self.experimental();
    VariableDefinitionT {
      key,
      id,
      data_type,
      access_type,
      experimental,
    }
  }

  /// The provider's unique key of the variable.
  #[inline]
  pub fn key(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(VariableDefinition::VT_KEY, None).unwrap()}
  }
  /// The unique ID of the variable. It is only unique via one provider.
  #[inline]
  pub fn id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(VariableDefinition::VT_ID, Some(0)).unwrap()}
  }
  /// The data type of the variable.
  #[inline]
  pub fn data_type(&self) -> VariableDataType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<VariableDataType>(VariableDefinition::VT_DATA_TYPE, Some(VariableDataType::UNSPECIFIED)).unwrap()}
  }
  /// The access type of the variable.
  #[inline]
  pub fn access_type(&self) -> VariableAccessType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<VariableAccessType>(VariableDefinition::VT_ACCESS_TYPE, Some(VariableAccessType::UNSPECIFIED)).unwrap()}
  }
  /// Marker to indicate whether the variable is experimental.
  ///
  /// Experimental means that the variable is not stable/reliable and it is hidden in the user interface.
  #[inline]
  pub fn experimental(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(VariableDefinition::VT_EXPERIMENTAL, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for VariableDefinition<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("key", Self::VT_KEY, true)?
     .visit_field::<u32>("id", Self::VT_ID, false)?
     .visit_field::<VariableDataType>("data_type", Self::VT_DATA_TYPE, false)?
     .visit_field::<VariableAccessType>("access_type", Self::VT_ACCESS_TYPE, false)?
     .visit_field::<bool>("experimental", Self::VT_EXPERIMENTAL, false)?
     .finish();
    Ok(())
  }
}
pub struct VariableDefinitionArgs<'a> {
    pub key: Option<flatbuffers::WIPOffset<&'a str>>,
    pub id: u32,
    pub data_type: VariableDataType,
    pub access_type: VariableAccessType,
    pub experimental: bool,
}
impl<'a> Default for VariableDefinitionArgs<'a> {
  #[inline]
  fn default() -> Self {
    VariableDefinitionArgs {
      key: None, // required field
      id: 0,
      data_type: VariableDataType::UNSPECIFIED,
      access_type: VariableAccessType::UNSPECIFIED,
      experimental: false,
    }
  }
}

impl Serialize for VariableDefinition<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("VariableDefinition", 5)?;
      s.serialize_field("key", &self.key())?;
      s.serialize_field("id", &self.id())?;
      s.serialize_field("data_type", &self.data_type())?;
      s.serialize_field("access_type", &self.access_type())?;
      s.serialize_field("experimental", &self.experimental())?;
    s.end()
  }
}

pub struct VariableDefinitionBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> VariableDefinitionBuilder<'a, 'b> {
  #[inline]
  pub fn add_key(&mut self, key: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(VariableDefinition::VT_KEY, key);
  }
  #[inline]
  pub fn add_id(&mut self, id: u32) {
    self.fbb_.push_slot::<u32>(VariableDefinition::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_data_type(&mut self, data_type: VariableDataType) {
    self.fbb_.push_slot::<VariableDataType>(VariableDefinition::VT_DATA_TYPE, data_type, VariableDataType::UNSPECIFIED);
  }
  #[inline]
  pub fn add_access_type(&mut self, access_type: VariableAccessType) {
    self.fbb_.push_slot::<VariableAccessType>(VariableDefinition::VT_ACCESS_TYPE, access_type, VariableAccessType::UNSPECIFIED);
  }
  #[inline]
  pub fn add_experimental(&mut self, experimental: bool) {
    self.fbb_.push_slot::<bool>(VariableDefinition::VT_EXPERIMENTAL, experimental, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> VariableDefinitionBuilder<'a, 'b> {
    let start = _fbb.start_table();
    VariableDefinitionBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<VariableDefinition<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, VariableDefinition::VT_KEY,"key");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for VariableDefinition<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("VariableDefinition");
      ds.field("key", &self.key());
      ds.field("id", &self.id());
      ds.field("data_type", &self.data_type());
      ds.field("access_type", &self.access_type());
      ds.field("experimental", &self.experimental());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct VariableDefinitionT {
  pub key: String,
  pub id: u32,
  pub data_type: VariableDataType,
  pub access_type: VariableAccessType,
  pub experimental: bool,
}
impl Default for VariableDefinitionT {
  fn default() -> Self {
    Self {
      key: "".to_string(),
      id: 0,
      data_type: VariableDataType::UNSPECIFIED,
      access_type: VariableAccessType::UNSPECIFIED,
      experimental: false,
    }
  }
}
impl VariableDefinitionT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<VariableDefinition<'b>> {
    let key = Some({
      let x = &self.key;
      _fbb.create_string(x)
    });
    let id = self.id;
    let data_type = self.data_type;
    let access_type = self.access_type;
    let experimental = self.experimental;
    VariableDefinition::create(_fbb, &VariableDefinitionArgs{
      key,
      id,
      data_type,
      access_type,
      experimental,
    })
  }
}
